//	--------------------------------------------------------------------------------------------------
h1	Assembler
	Load source files, load source, source files, assembler source
	
p	zxsp comes with a built-in version of the zasm z80 assembler. This allows to load snapshots from assembler source, making edit-assemble-load-and-test cycles a more convenient task. 
p	The required file name extension for assembler sources is ".ass" or ".src".

p	You can find the assembler as a stand-alone command line tool at <http://k1.spdns.de/Develop/projects/zasm/>. Source and binary distributions are in subdirectory <http://k1.spdns.de/Develop/projects/zasm/distributions/> and documentation in subdirectory <http://k1.spdns.de/Develop/projects/zasm/doc/>. You may want to read the documentation in any case. You can assemble Z80 source online with the cgi interface at <http://k1.spdns.de/cgi-bin/zasm.cgi>.


h4	zasm

p	zasm is a two-pass assembler which uses the standard layout for z80 assembler sources: labels start in column 1, opcodes are prepended by white space and comments are introduced with a semicolon.

h6	Assembler source example:

pre
	foopoint:	add		a,'0'			; convert to numeric character
				call	print_a			; to current stream
				ret

p	Label names can be any length, conditional assembly with #if, #else and #endif is possible. The assembler can #include other source files or #insert binary files. Numeric expressions use proper operator precedence. Numeric literals may be in decimal, hex, binary or ascii, where multiple formats are supported.

p	The assembler requires a special overall layout of the source:

h6	Template for .sna snapshots

pre
	#target sna
	#head 27
		; ...				; registers, as defined for the .sna format
	#code $4000,$c000		; origin (must be $4000) and block size ($4000 or $c000)
		; ...
	#end

h6	Template for .tap files

pre
	#target tap
	#code   0,17,0			; header block
		; ...
	#code   0,2000,255		; data block
		; ...
	#end


h6	Template for .o or .80 files
ul	<li>This is a tape snapshot format for ZX80. It contains all the used ram from $4000 to E_LINE.
	<li>The system variables $4000 - 0x0028 (excl.) must be set properly with DEFBs and similar.
	<li>The assembler sets E_LINE at address $400A (at offest $0A in file)

pre	#target 80				; or target o
	#code	$4000,$2000		; origin (must be $4000) and memory size (max. $c000)
		; ...
	#end


h6	Template for .p or .81 files
ul	<li>This is a tape snapshot format for ZX80. It contains all the used ram from $4009 to E_LINE.
	<li>The system variables $4009 - 0x003c (excl.) must be set properly with DEFBs and similar.
	<li>The assembler sets E_LINE at address $4014 (at offest $14-$09 in file)

pre	#target 81				; or target p
	#code	$4009,$2000-$09	; origin (must be $4009) and memory size (max. $c000-$09)
		; ...
	#end
	
	
	
	


h4	Integration in zxsp

p	When you load an assembler source from the 'open file' dialog, the source is assembled and the resulting file is loaded just as if you had opened it in first place. 

p	However, the original assembler source filename is remembered for 'Reload current file'. So if you select 'Reload current file' from the file menu then the source is assembled again before loading. This is handy if you modify your source and want to test the new version: Just save the source and press 'cmd' + 'R' in zxsp and it loads the new version.

p	If the assembler finds errors then loading fails. An alert box pops up to indicate the case and the assembler listing of pass 1 or pass 2 (whatever is appropriate) is saved for your inspection.

h5	Writing .sna sources

p	If you create a .sna snapshot, then setting up the registers, system variables and BASIC program can be painful. A good idea is, to write the BASIC program on a ZX Spectrum, that is, in zxsp, and save a snapshot at the position where you want to start off. Then split the snapshot with a hexeditor into registers (first 27 bytes) and screen, sysvars and BASIC program (length varies) and #insert these files into the main assembler source files after #head and #code respectively. 

p	The files for the following example are available here: <a href="b/sna_example.zip">sna_example.zip</a>

h6	Example for a .sna source

pre
	#target sna

	#head	27
	#insert "empty_sna_head"

	#code	$4000,$c000
	#insert "empty_sna_page1"


	; note:
	;	bc = return value
	;	rst 16: print char in A

	OPKAN		equ		$1601		; open channel in register A

	; -------------	entry point ----------------------
	start:
				ld		a,2			; Stream: main screen
				call	OPKAN		; open channel

				call	printmsg
				defm	$0d, "Hello world", $0d, $00
			
				ld		bc,4711
				ret

	printmsg:	pop		hl
	printmsg_1	ld		a,(hl)
				inc		hl
				and		a
				ret		z
				rst		16
				jr		printmsg_1

	#end


h5	Writing .tap sources

p	If you create a .tap tape file, then you probably need 4 #code blocks in your source, because a BASIC loader is required in most cases.

p	The files for the following example are available here: <a href="b/tap_example.zip">tap_example.zip</a>

h6	Example for a .tap source

pre
	headerflag:     equ 0
	dataflag:       equ $ff

	tCLEAR  equ     $FD             ; token CLEAR
	tLOAD   equ     $EF             ; token LOAD
	tCODE   equ     $AF             ; token CODE
	tPRINT  equ     $F5             ; token PRINT
	tUSR    equ     $C0             ; token USR
	tLET	equ		$F1				; token LET
	tSAVE	equ		$F8				; token SAVE

	#target tap

	#code   0,17,headerflag		; program header

			defb    0				; program
			defm    "testloader"	; make sure these are 10 bytes!
			defw    programsize		; length of basic program and variables
			defw    10				; line number for auto start
			defw    programsize		; length of basic program without variables


	#code	0,$100,dataflag     ; program data. size is truncated as required

	; 60 CLEAR $6000
				defb    0,60                    ; line number
				defb    end60-($+1)             ; line length
				defb    0                       ; statement number
				defb    tCLEAR                  ; token CLEAR
				defm    '24576',$0e0000006000   ; number $6000, ascii & internal format
	end60:		defb    $0d						; line end marker

	; 70 LOAD "" CODE $8000
				defb    0,70                    ; line number
				defb    end70-($+1)             ; line length
				defb    0                       ; statement number
				defb    tLOAD,'"','"',tCODE     ; token LOAD, 2 quotes, token CODE
				defm    '32768',$0e0000008000   ; number $8000, ascii & internal format
	end70:		defb    $0d						; line end marker

	; 80 LET n = USR 32768
				defb    0,80                    ; line number
				defb    end80-($+1)             ; line length
				defb    0                       ; statement number
				defb    tLET,'n','=',tUSR		; token LET, n, =, token USR
				defm    '32768',$0e0000008000   ; number $8000, ascii & internal format
	end80:		defb    $0d                     ; line end marker			
			
	programsize     equ     $
	

	#code   0,17,headerflag			; CODE header

			defb    3				; code
			defm    "testcode  "	; make sure these are 10 bytes!
			defw    codeend-32768	; length of data block
			defw    32768			; original position
			defw    0				; unused


	#code   32768,32768,dataflag	; CODE data

	; note:
	;	bc = return value
	;	rst 16: print char in A

	OPKAN		equ		$1601		; open channel in register A

	; -------------	entry point ----------------------
	start:
				ld		a,2			; Stream: main screen
				call	OPKAN		; open channel

				call	printmsg
				defm	$0d, "Hello world", $0d, $00
			
				ld		bc,4711
				ret

	printmsg:	pop		hl
	printmsg_1	ld		a,(hl)
				inc		hl
				and		a
				ret		z
				rst		16
				jr		printmsg_1

	codeend		equ		$
	#end


h6	#code

p	As you may already know from the zasm documentation, the three arguments to #code are code origin, block length (max.), and block type. The final checksum for each block is calculated and appended by zasm automatically. #code blocks for #target tap are truncated as required. So it is not neccessary to know the exact length beforehand. Just insert your expected maximum sizes.

p	Getting the proper internal representation for BASIC lines may be a little bit tricky. You may enter them in zxsp and save a snapshot which you can scrutinize in a hex editor. The basic layout should be obvious from the above example.

p	After assembling a tap file zxsp loads this in the "open file" mode, that is, it does not insert it into the tape recorder but tries to instant load it. For this to work, you must only use the rom tape loading routines. Whenever your code on the tap file starts to load with it's own routine, then instant loading does not finish, because this is not detected by the emulator. You had to insert the tap file into the virtual tape recorder instead. Currently (zxsp 0.7.1) the tap file is always loaded into a ZX Spectrum 48k. This may be improved some day.








	
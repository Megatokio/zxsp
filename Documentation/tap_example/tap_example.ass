
headerflag:     equ 0
dataflag:       equ $ff

tCLEAR  equ     $FD             ; token CLEAR
tLOAD   equ     $EF             ; token LOAD
tCODE   equ     $AF             ; token CODE
tPRINT  equ     $F5             ; token PRINT
tUSR    equ     $C0             ; token USR
tLET	equ	$F1		; token LET
tSAVE	equ	$F8		; token SAVE

#target tap

#code   0,17,headerflag	    ; program header

	defb    0		; program
	defm    "testloader"	; make sure these are 10 bytes!
	defw    programsize	; length of basic program and variables
	defw    10		; line number for auto start
	defw    programsize	; length of basic program without variables

#code	0,$100,dataflag     ; program data. size is truncated as required

; 60 CLEAR $6000
	defb    0,60                    ; line number
	defb    end60-($+1)             ; line length
	defb    0                       ; statement number
	defb    tCLEAR                  ; token CLEAR
	defm    '24576',$0e0000006000   ; number $6000, ascii & internal format
end60:	defb    $0d			; line end marker

; 70 LOAD "" CODE $8000
	defb    0,70                    ; line number
	defb    end70-($+1)             ; line length
	defb    0                       ; statement number
	defb    tLOAD,'"','"',tCODE     ; token LOAD, 2 quotes, token CODE
	defm    '32768',$0e0000008000   ; number $8000, ascii & internal format
end70:	defb    $0d			; line end marker

; 80 PRINT USR 32768
	defb    0,80                    ; line number
	defb    end80-($+1)             ; line length
	defb    0                       ; statement number
	defb    tLET,'n','=',tUSR	; token LET, n, =, token USR
	defm    '32768',$0e0000008000   ; number $8000, ascii & internal format
end80:	defb    $0d                     ; line end marker
		
programsize     equ     $


#code   0,17,headerflag		; CODE header

		defb    3		; code
		defm    "testcode  "	; make sure these are 10 bytes!
		defw    codeend-32768	; length of data block
		defw    32768		; original position
		defw    0		; unused

#code   32768,32768,dataflag	; CODE data


; note:
;	bc = RÃ¼ckgabewert
;	rst 16: print char in A

OPKAN		equ	$1601		; open channel in register A


; -------------	entry point ----------------------
start:
		ld	a,2		; stream: main screen
		call	OPKAN		; open channel

		call	printmsg
		defm	$0d, "Hello world", $0d, $00
		
		ld	bc,4711
		ret

printmsg:	pop	hl
printmsg_1	ld	a,(hl)
		inc	hl
		and	a
		ret	z
		rst	16
		jr	printmsg_1


codeend		equ	$

#end



















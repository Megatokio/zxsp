

Die Zeit in zxsp
----------------


	typedef double 		Time;				[sec]
	typedef double 		Frequency;			[1/sec]


DSP: core audio interrupt
-------------------------

	Frequency	samples_per_second;			sample frequency		const (0.8.3)
	Time		system_time;				real time 				incremented with each audio interrupt

	#define DSP_SAMPLES_PER_BUFFER	400		Audio buffer size		const
	#define	DSP_SAMPLES_STITCHING	4		buffer stitching for acceptable time overflow

	#define	samples_per_dsp_buffer			double(DSP_SAMPLES_PER_BUFFER)
	#define seconds_per_dsp_buffer			(DSP_SAMPLES_PER_BUFFER/samples_per_second)
	#define seconds_per_dsp_buffer_max		((DSP_SAMPLES_PER_BUFFER+DSP_SAMPLES_STITCHING-0.01)/samples_per_second)


Machine:
--------

Virtual machine time:

	There are two time scales: 
	• cpu T cycle count cc				
		• biased to the current video frame start
		• shifted at every video frame end
	• time in seconds					
		• biased to the current dsp audio buffer start
		• shifted at every audio interrupt end
	
	Time advances when the cpu runs and increments it's cycle counter.
	Shifting the time or cc does not change the current time.
	Time t and cc are referenced at the current frame start at t/cc = tcc0/0
	Absolute time is not needed internally!

Absolute time information:

	long		total_frames;			accumulated frames until now
	double		total_cc;				accumulated cpu T cycles until now
	long		total_buffers;			accumulated dsp buffers until now
	double		total_time;				accumulated time[sec] until now

Conversion settings:

	Frequency	cc_per_sec;				cpu speed (cc per sec)
	double		tcc0;					time t (biased to dsp buffer start) at current frame start (cc=0)

Formula:

	Time		t_for_cc(cc)			= tcc0 + cc / cc_per_sec
	Time		t_for_cc_lim(cc)		= Min( t_for_cc(cc), seconds_per_dsp_buffer_max)
	double		cc_for_t(time)			= (time-tcc0) * cc_per_sec
	long		cc_dn_for_t(time)		= long(floor(cc_for_t(time)))
	long		cc_up_for_t(time)		= long(ceil(cc_for_t(time)))		always round up!


ZxItem:
-------

	PowerOn(t,cc), Reset(t,cc), Input(t,cc), Output(t,cc) are passed the time and cc of the current time.
	In case of PowerOn() and Reset() cc is rounded up and may not match t exactly.
	• t is in range  0.0 ... seconds_per_dsp_buffer_max  ((which is limited to max and then does not match cc exactly))
	• cc is in range 0 ... cc_per_frame + few_cycles

void ShiftTimeDspEnd ( Time t )

	Called at end of the dsp audio interrupt. 
	All items which generate sound must run and emit sound up to time t.
	Other items, which mostly rely on Time based timing should run up to time t too.
	The time base will be decremented by time t after this call
	and all items, which keep time based times must do so too.

void ShiftCpuCycleFfb ( long cc )

	Called at end of a video frame.
	Items, which mostly rely on cc based timing should run up to cycle cc.
	The cpu cycle base will be decremented by cc after this call
	and all items, which keep cc based times must do so too.
	
void SpeedChanges ( double overdrive, long cpu_clock )

	The machine's 'overdrive' factor or cpu speed 'cc_per_sec' will change to the new values after this call.
	
	Overdrive:
	• Most times this is 1.0
	• May be set to very low values by the user for debugging. 
	• Speed up or throttle down the whole machine as an entity.
	• Should affect all cpu speed independent timing, e.g. frame rate, hardware latencies.
	• Should not affect sound.

	Cpu clock:
	• Most time this is the original speed scaled by the overdrive factor.
	• May be varied by a small factor which reflects a changed cpu clock predivider.
	• Limited to 1 Hz ... 20 MHz 
	• Should affect all timings which are directly coupled to the cpu clock, e.g. waitstates, framebuffer reading.
















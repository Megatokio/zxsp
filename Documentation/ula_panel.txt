
h1	Video output

p	<a target="_blank" href="b/screenshot3.jpg"><img align=left style="border:0px; padding-right:8px" src="b/screenshot3s.jpg"></a> zxsp&nbsp;currently supports the video mode of the original machines. Enhanced modes for the other machines are in the pipe.

p	zxsp reproduces video output of the 16 kB machines up to Amstrad's model +2 with high precision. Actually i currently know of no scene demo which does not work as expected. This applies to both in-screen and border effects. If you find any differences send me email and snapshot please.

p	Video output uses OpenGL and hopefully hardware scaling. The video zoom adapts to the window size and is truncated to integer values, the padding around the screen displays border. So just resize the window to get different magnification and different amount of border. 

p	Video frames are updated 50 times a second - if possible. Depending on the amount of action in the screen, your computer's power and the amount of open instances and other programs frames are dropped. 



h4	ULA control panel

p	<img align="left" src="b/ula_panel.png"> In the windows menu you find a panel for the ULA,  which in essence forms a CRTC (cathode ray tube controller) plus the keyboard and ear/mic i/o port. Besides those ports it has no real registers, but i have added some so we can play around a little, investigating why a certain demo behaves wrong or the like. If you want to cancel editing in a field, just enter empty data.

h5	ULA clock

p	All timings in a ZX Spectrum are derived from a single crystal, which is predivided by the ula and fed namely to the cpu. You can throttle or overdrive the whole machine by adjusting the ula input clock. Either you enter a percentage value in the left input field or the frequency in the right field. In the frequency field you can also add units like MHz or kHz. Accordingly the cpu clock and screen timings vary. 

p	Though the AY sound chip clock is also produced by the ula, this fact is ignored and the AY sound chip clock is set in the AY panel individually, because it's unlikely that you want to change the pitch of the sound if you increase or decrease the machine's speed.

p	The running program can't detect that you have changed the ula input clock, because the amount of cpu clock cycles per interrupt is not changed. As the interrupt frequency goes up or down, the keyboard repeat varies accordingly.

p	There are menu shortcuts for some commonly used speed settings in Menu > Options > Machine Throttle/Overdrive. 

p	You cannot speed-up tape loading this way, because the tape recorder is a separate unit which feeds sound into the audio buffers for all open machine instances.

p	The ula clock is currently limited to 1 Hz and 100 MHz respectively. As there are also limits on the cpu frequency setting, the ula clock typically can't be lowered below 4 Hz or rised above 80 MHz. These limits are applied for your security, so that you can't block your entire Mac too easily.

h5	CPU clock

p	The cpu clock is derived from the ula's input clock by a 1/4 predivider. You can change the predivider from the ZX Spectrum standard value of 1/4 to 1/1, 1/2 or 1/8. Accordingly the cpu executes more or less cycles per interrupt.
p	A machine code program can detect this change; intentionally or by crashing. As the interrupt frequency is not altered, keyboard repeat or the like is not affected.
p	There are some menu shortcuts for commonly used speed settings in Menu > Options > Cpu Clock Predivider. 

p	You can also enter a new value into the frequency field. As this does not affect the cpu predivider the overall speed of the machine is changed, just as setting the ula input clock. All these fields change accordingly.

p	The cpu clock is currently limited to 1 Hz and 20 MHz respectively. This is for your security, so that you can't block your entire Mac too easily.

h5	Video signals
p	All fields here are for experimenting with the video output. Changes here change the total amount of cpu cycles per interrupt and can be detected by the running program. Entered values are pinned to reasonable limits and forced to valid multiples of what-ever-applies.

h6	Top rows
p	Change the amount of border lines above the usable screen. 

h6	Screen rows
p	You cannot change the amount of rows per screen or pixels per row, because too much is hard coded here. But you can switch off the screen, so that the display only shows the border as it would appear underneath the screen pixels. This is similar to the ZX 81's fast mode, but does not disable the related cpu wait states. It may be useful to check and adjust the timing of the demo you just decided to write.

h6	Bottom rows
p	Change the amount of border lines below the usable screen. 

h6	Bytes per row
p	Changes the amount of linear bytes read by the ula to form one scan line. Typically this is 56 or 57, depending on the model. The first 32 bytes come from the screen pixels and are read in blocks of 2 bytes (plus another 2 bytes for attributes, which are not counted here. therefore the term 'linear' bytes) The remainder is border. Somewhere in the middle of the border range is the horizontal beam flyback, so that the last bytes from a scan line are actually displayed as left-side border of the next scan line on the TV screen.

p	Equally you can change the amount of cpu cycles per scanline, which derives from the bytes per scan line read by the ula and the cpu clock predivider.

h6	Frames per second
	cycles per frame, cycles per irpt, cycles per interrupt

p	Another chance not only to see another interesting value but to change the overall speed of the machine. ula and cpu clock are adjusted accordingly, while all other counter settings which affected the overall frames per second are kept.

p	The second field displays the amount of cpu cycles per interrupt, which is a very important value when you write your own demo.

h6	CRT row, col
	crt row, crt col

p	When you throttle down the machine heavily to watch how a demo or similar draws to screen, or when the cpu is paused, then these fields are activated and show the current row and column of the video beam. Also a flag indicates, whether it is currently within the inner screen area and the cpu will suffer from lots of wait states if it accesses the video page right now. Also at some point a video beam indicator is inserted into the screen image to aid you pushing your demo's timing to the limit.

h5	Video ram contention

p	Here you can switch off any wait states for the contended ram pages. 
p	The two input fields are still disfunct. (as of version 0.6.3)

h5	Border, Mic, Ear

p	These fields show the current state of the only actually existing ula register. 

h6	Frame hits
p	Shows how many frames out of 100 were actually drawn in the last two seconds. 
	
h5	Restore Defaults
p	Your last resort if you have messed up too many settings. ;-)



h4	MMU registers for the +128K / +2

p	<img align="left" src="b/ula_panel2.png"> If you set the machine to ZX Spectrum +128K, +2 or similar, then the ULA panel expands and reveals more display fileds for the page control register, port $7FFD. This port cannot be read by the running programme; but now, you can. <b>;-)</b>

p	The MMU allows you to select any of 8 Ram pages to be mapped into the upper address $C000 … $FFF of the CPU, to select the videoram from page 5 or 7, the Rom page for the lower address range $0000 … $3FFF of the CPU and to lock the whole machine into 48K mode for ever.

h5	Port $7FFD
p	You can edit the port byte, but you should know when and with which value, or your Specci crashes immediately. All other text fields show the derived states of individual MMU functions:

h5	RAM $c000
p	Select which Ram page is paged in at the upper address range $C000 … $FFFF. This can be any of the 8 Ram pages 0 to 7.

h5	RAM $8000
p	This Ram page can't be changed in the +128K.

h5	RAM $4000
p	This Ram page too can't be changed in the +128K.

h5	ROM $0000
p	This selects which Rom page to page in in the lower address range $000 … $3FFF. This can be either Rom page 0, which is the boot Rom page and contains the additional stuff for the +128K, or Rom page 1, which contains the 48K model's Rom.

h5	Videoram
p	Select one of the two possible Ram pages for the screen display: page 5 (standard) or page 7.

h5	Locked to 48k
p	The Mmu can be locked to 100% compatible 48K mode. Normally when this bit is set by the programme, it can not be changed back except if you reset the machine. 



h4	MMU registers for the +3 / +2A

p	<img align="left" src="b/ula_panel3.png"> If you set the machine to ZX Spectrum +2A, +3 or similar, then the ULA panel expands even more and reveals display fileds for the page control register, port $7FFD and $1FFD. Both ports cannot be read by the running programme. Major new mode is the 'Ram only' mode, as opposed to the standard 'Rom+Ram' mode. 

h5	Port $7FFD
p	This is mostly identical to the options for the +128K / +2, except that the new high bit for the Rom page selection is stored in port $1FFD. Remember, the +3 / +2A now have 64 kB (4 pages) of Rom.

p	The MMU port $7FFD allows you to select any of 8 Ram pages to be mapped into the upper address $C000 … $FFF of the CPU, to select the videoram from page 5 or 7, the Rom page for the lower address range $0000 … $3FFF of the CPU and to lock the whole machine into 48K mode for ever.

h5	Port $1FFD
p	This is the new port, which contains bits to select the new 'Ram only' mode, the high bit for Rom selection, 2 bits to select from 4 layouts for the 'Ram only' mode and bits to set the printer strobe and the disc motor.

h5	RAM $c000
p	Select which Ram page is paged in at the upper address range $C000 … $FFFF. In Rom+Ram mode this can be any of the 8 Ram pages 0 to 7; in Ram-only mode this can be page 3 or 7.

h5	RAM $8000
p	Select the Ram page which is paged in at $8000 … $BFFF. In Rom+Ram mode this can only be page 2, in Ram-only mode this can be page 2 or page 6.

h5	RAM $4000
p	Select the Ram page which is paged in at $4000 … $7FFF. In Rom+Ram mode this can only be page 5, in Ram-only mode this can be page 1, 5 or page 7.


h5	ROM $0000 / RAM $0000
p	In Rom+Ram mode, this selects which Rom page to page in in the lower address range $000 … $3FFF. This can be either Rom page 0, which is the boot Rom page and contains the additional stuff for the +128K, or Rom page 3, which contains the 48K model's Rom, or page 1 or page 2, which contain the editor and DOS or stuff. In 'Ram-only' mode this selects the Ram page which is paged in at $0000 … $3FFF, which can be page 0 or page 4.

h5	Videoram
p	Select one of the two possible Ram pages for the screen display: page 5 (standard) or page 7.

h5	Locked to 48k
p	The Mmu can be locked to 100% compatible 48K mode. Normally when this bit is set by the programme, it can not be changed back except if you reset the machine. 

h5	RAM only
p	Select the new 'Ram only' mode or the old 'Rom+Ram' mode.
p	In the standard 'Rom+Ram' mode, the Rom and Ram paging is controlled by the $7FFD port as in the +128K or +2.
p	In 'Ram only' mode, all memory pages are set to Ram pages and the selection from 4 possible layouts is taken from two bits in the $1FFD port:

pre	address		 mode 0	 mode 2	 mode 4	 mode 6
	-------------------------------------------
	$C000…$FFFF	 page 3	 page 7	 page 3	 page 3
	$8000…$BFFF	 page 2	 page 6	 page 6	 page 6
	$4000…$7FFF	 page 1	 page 5	 page 5	 page 7
	$0000…$3FFF	 page 0	 page 4	 page 4	 page 4


h5	Disc motor
p	start/stop floppy disc motor. Not yet supported. [2007-03]

h5	Printer strobe
p	set/reset printer port strobe line. Not yet supported. [2007-03]




